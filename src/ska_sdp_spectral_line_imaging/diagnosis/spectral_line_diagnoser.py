import logging

import numpy as np
import xarray as xr

from ska_sdp_piper.piper.utils import read_dataset, read_yml
from ska_sdp_spectral_line_imaging.diagnosis.plot import (
    amp_vs_channel_plot,
    amp_vs_uv_distance_plot,
)
from ska_sdp_spectral_line_imaging.stages.select_vis import select_field

logger = logging.getLogger()


class SpectralLineDiagnoser:
    """
    Spectral line imaging pipeline diagnoser class.

    Attributes
    ----------
      input_path: Path
          path of pipeline run output.
      output_dir: Path
          Location where to store diagnose output.
      pipeline_args: dict
          Dictionary of cli arguments pipeline ran with.
      pipeline_config: dict
          Dictionary of pipeline configuration.
      input_ps: Xarray.Dataset
          Input processing provided to pipeline.
      residual: Xarray.Dataset
          Residual visibilities generated by the pipeline.
          Visibilities after continuum subtraction generated by the pipeline.
      model: Xarray.DataArray
          Model used in continuum subtraction stage in pipeline.
    """

    def __init__(self, input_path, output_path):
        """
        Initialise the Diagnoser object
        """
        self.input_path = input_path
        self.output_dir = output_path

        cli_yaml_path = next(input_path.glob("*.cli.yml"))
        self.pipeline_args = read_yml(cli_yaml_path)

        config_yaml_path = next(self.input_path.glob("*.config.yml"))
        self.pipeline_config = read_yml(config_yaml_path)

        self.input_ps = None
        self.residual = None
        self.model = None

        self.__read_input_data()

    def diagnose(self):
        """
        Main method that runs the diagnosis steps.
        """

        logger.info("Creating plots...")
        self.__plot_uv_distance()

        self.__plot_visibility(
            self.input_ps.VISIBILITY,
            "Input Visibilities",
            "input-vis",
        )
        if self.model is not None:
            self.__plot_model()
        if self.residual is not None:
            self.__plot_visibility(
                self.residual.VISIBILITY,
                "Residual Visibilities",
                "residual-vis",
            )

        logger.info("=========== DIAGNOSE COMPLETED ===========")

    def __plot_model(self):
        logger.info("Creating model plots")

        amp_vs_channel_plot(
            self.model,
            title="Single Stoke I Amp Vs Channel on Model Visibilities",
            path=self.output_dir
            / "single-stoke-i-amp-vs-channel-model-vis.png",
        )
        amp_vs_channel_plot(
            self.model,
            title="All stokes Amp Vs Channel on Model Visibilities",
            path=self.output_dir / "all-stokes-amp-vs-channel-model-vis.png",
            all_stokes=True,
        )

    def __plot_visibility(
        self,
        visibility,
        plot_title_postfix,
        file_postfix,
    ):
        logger.info(f"Creating {plot_title_postfix}")

        amp_vs_channel_plot(
            visibility,
            title=f"Single Stoke I Amp Vs Channel on {plot_title_postfix}",
            path=self.output_dir
            / f"single-stoke-i-amp-vs-channel-{file_postfix}.png",
        )

        amp_vs_channel_plot(
            visibility,
            title=f"All stokes Amp Vs Channel on {plot_title_postfix}",
            path=self.output_dir
            / f"all-stokes-amp-vs-channel-{file_postfix}.png",
            all_stokes=True,
        )

    def __plot_uv_distance(self, channel=1):
        uv_distance = self.__get_uv_dist()
        amp_vs_uv_distance_plot(
            uv_distance,
            self.input_ps.VISIBILITY,
            channel=channel,  # TODO: should pass channel from outside?
            title="Amp vs UV Distance before Continnum Subtraction",
            path=self.output_dir / "amp-vs-uv-distance-before-cont-sub.png",
        )

        if self.residual is not None:
            amp_vs_uv_distance_plot(
                uv_distance,
                self.residual.VISIBILITY,
                channel=channel,  # TODO: should pass channel from outside?
                title="Amp vs UV Distance after Continnum Subtraction",
                path=self.output_dir / "amp-vs-uv-distance-after-cont-sub.png",
            )

    def __read_input_data(self):
        """
        Read
            - input processing set
            - residual
            - model data

        required for diagnosis.
        """

        pipeline_parameter = self.pipeline_config["parameters"]
        select_vis_config = pipeline_parameter["select_vis"]
        pipeline_run_config = self.pipeline_config["pipeline"]
        input_ps = read_dataset(self.pipeline_args["input"])
        logger.info("Reading input visibility")
        self.input_ps = select_field.stage_definition(
            None,
            **select_vis_config,
            _input_data_=input_ps,
        )["ps"]

        if pipeline_run_config.get("export_model"):
            logger.info("Reading model data")
            ps_out = pipeline_parameter["export_model"]["psout_name"]
            self.model = xr.open_zarr(self.input_path / ps_out)[
                "VISIBILITY_MODEL"
            ]
        else:
            logger.info("Export model stage not run.")

        if pipeline_run_config.get("export_residual"):
            logger.info("Reading residual data")
            ps_out = pipeline_parameter["export_residual"]["psout_name"]
            self.residual = xr.open_zarr(self.input_path / ps_out)
        else:
            logger.info("Export residual stage not run.")

    def __get_uv_dist(self):
        vec_cal_uv_distance = np.vectorize(
            lambda uvw: (uvw[0] ** 2 + uvw[1] ** 2) ** 0.5, signature="(n)->()"
        )
        uv_distance = vec_cal_uv_distance(self.input_ps.UVW.mean(dim="time"))
        return uv_distance
