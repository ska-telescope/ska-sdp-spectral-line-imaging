[tool.poetry]
name = "ska-sdp-spectral-line-imaging"
version = "0.3.0"
description = "SKA SDP Spectral Line Imaging Pipeline"
authors = ["DHRUVA <DHRUVA-team@SKA>"]
license = "BSD-3-Clause"
packages = [
    { include = "ska_sdp_spectral_line_imaging", from = "src" },
    { include = "ska_sdp_piper", from = "src" }
]

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[[tool.poetry.source]]
name = "skao"
url = "https://artefact.skao.int/repository/pypi-internal/simple"
priority = "supplemental"

[tool.poetry.dependencies]
python = "^3.10"
nbmake = "^1.4.1"
setuptools = "^70.0.0"
nbqa = "^1.8.5"
numpy = "^1.26.4"
flake8 = "^7.0.0"
jsonschema = "^4.22.0"
typer = "^0.12.3"
xradio = {version = "0.0.31", python = "<3.12,>=3.10"}
graphviper = {version = "0.0.27", python = "<3.13,>=3.10"}
xarray = "^2024.6.0"
ducc0 = "^0.34.0"
ska-sdp-datamodels = "^0.3.0"
ska-ser-logging = "^0.4.3"

[tool.poetry.group.dev.dependencies]
isort = "^5.6.4"
black = "^22.3.0"
pylint = "^3.2.3"
pygments = "^2.15.1"
python-dotenv = ">=0.5.1"
pipdeptree = "^2.10.2"
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
pytest-pylint = "^0.21.0"
pylint-junit = "^0.3.4"
pytest-json = "^0.4.0"
pytest-json-report = "^1.5.0"
pytest-mock = "^3.14.0"
mock = "^5.1.0"

[tool.poetry.group.docs.dependencies]
docutils = "<=0.19"
markupsafe = "^2.1.3"
myst-parser = "^3.0.1"
ska-ser-sphinx-theme = "^0.2.0"
sphinx = ">=1.6,<7"
sphinx-autobuild = "^2021.3.14"
sphinxcontrib-websupport = "^1.2.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
piper = "ska_sdp_piper.app.cli:app"
spectral-line-imaging-pipeline = "ska_sdp_spectral_line_imaging.pipeline:spectral_line_imaging_pipeline"

[tool.coverage.run]
branch = true
source = [
    "src",
]

[tool.coverage.report]
fail_under = 80
exclude_also = [
    "(?s)\\A.*# pragma: exclude file.*\\Z",
    ]

[tool.pytest.ini_options]
addopts = "--cov --json-report --json-report-file=htmlcov/report.json --cov-report term --cov-report html --cov-report xml --pylint --pylint-error-types=EF --junitxml=./build/reports/unit-tests.xml"
testpaths = [
    "tests",
]
pythonpath = [
  "."
]