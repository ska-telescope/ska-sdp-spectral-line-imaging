#!/usr/bin/env bash

set -e

exec < /dev/tty

# List of files to track
ENV_FILES=("pyproject.toml" "environment.yml")

# Check if any of the specified files have changed, either
# now or since previous head change
STAGED_FILES=$(git diff --cached --name-only)
CHECK_FOR_ENV_FILE_CHANGE=0
file=""
for file in "${ENV_FILES[@]}"; do
    if [[ " ${STAGED_FILES} " == *"$file"* ]] || [[ -n "$(git diff HEAD@{1} HEAD -- ${file})" ]] ; then
        CHECK_FOR_ENV_FILE_CHANGE=1
        break
    fi
done

if [[ $CHECK_FOR_ENV_FILE_CHANGE -eq 1 ]] ; then
    echo -e "\nChanges detected in \"$file\""
    echo -e "\nThis might be due to staged changes OR because you moved git's local HEAD.\n"

    read -rp 'Have you updated your local conda environment? [y/n] ' response
    case "$response" in
        [Yy]*) ;;
        [Nn]*) echo -e "\nPlease run the './scripts/recreate-conda-env.sh' to update conda environment, then install the pipeline with './scripts/install-pipeline.sh'\n" ; exit 1;;
        *) echo -e "\nPlease answer yes or no. Exiting.\n"; exit 1 ;;
    esac
fi

# check for changes in Dockerfile
if [[ " ${STAGED_FILES} " == *"Dockerfile"*  ]] ; then
    echo -e "\nChanges detected in \"Dockerfile\""
    echo
    read -rp 'Have you performed linting of Dockerfile [y/n] ' response
    case "$response" in
        [Yy]*) ;;
        [Nn]*) echo -e "\nPlease run the 'make oci-lint' to lint the Dockerfile\n" ; exit 1;;
        *) echo -e "\nPlease answer yes or no. Exiting.\n"; exit 1 ;;
    esac
fi

exec <&-


# Running lints, test, build
echo -e "\n\
======================================\n\
          Running python lint         \n\
======================================\n";

make python-lint;

echo -e "\n\
======================================\n\
          Running python test         \n\
======================================\n";

make python-test;

echo -e "\n\
======================================\n\
          Running python build        \n\
======================================\n";

make python-build;


# Checking if docs can be built
echo -e "\n\
==========================================\n\
    Building readthedocs documentation   \n\
==========================================\n";

make docs-build clean;
make docs-build html;

# Successful!
echo -e "\n\
==========================================\n\
        Pre-commit run successful !       \n\
==========================================\n";

exit 0
