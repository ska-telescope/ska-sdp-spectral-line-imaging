#!/usr/bin/env bash

set -e

exec < /dev/tty

# List of files to track
FILES=("pyproject.toml" "environment.yml")

# Check if any of the specified files are staged for commit
STAGED_FILES=$(git diff --cached --name-only)
CHECK_FOR_FILE_CHANGE=0
for file in "${FILES[@]}"; do
    if [[ " ${STAGED_FILES} " == *"$file"* ]]; then
        CHECK_FOR_FILE_CHANGE=1
        break
    fi
done

if [[ $CHECK_FOR_FILE_CHANGE -eq 1 ]] ; then
    echo -e "\nChanges detected in $file"
    echo
    read -rp 'Have you updated your local conda environment? [y/n] ' response
    case "$response" in
        [Yy]*) ;;
        [Nn]*) echo -e "\nPlease run the 'scripts/recreate-conda-env.sh' to update conda environment, then install the pipeline\n" ; exit 1;;
        *) echo -e "\nPlease answer yes or no. Exiting.\n"; exit 1 ;;
    esac
fi

# If a new file is added, check if the documentation source files are recreated
if [[ -n $(git status --porcelain | grep "^A") ]]; then
    echo -e "\nSome new files have been added"
    echo
    read -rp 'Have you generated the API documentation using create-doc? [y/n] ' response
    case "$response" in
        [Yy]*) ;;
        [Nn]*) echo -e "\nPlease run 'make -C docs/ create-doc' to generate readthedocs documentation from API docstrings.\nBe sure to review the changes after creating documentation.\n" ; exit 1;;
        *) echo -e "\nPlease answer yes or no. Exiting.\n"; exit 1 ;;
    esac
fi

exec <&-

# Running format, lints, test
echo -e "\n\
======================================\n\
    Running python lint and tests   \n\
======================================\n";

make python-lint;
make python-test;

# Checking if docs can be built
echo -e "\n\
==========================================\n\
    Building readthedocs documentation   \n\
==========================================\n";

make docs-build clean;
make docs-build html;

# A sleep to check for any reports
echo "Exiting pre-commit";

exit 0
