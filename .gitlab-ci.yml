variables:
  GIT_SUBMODULE_STRATEGY: recursive
  CI_POETRY_VERSION: 1.8.3

stages:
  - lint
  - versioning
  - prepare
  - build
  - test
  - scan
  - publish
  - pages

include:
  # Docs pages
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/docs.gitlab-ci.yml"
  
  # Run python jobs
  - project: "ska-telescope/templates-repository"
    file: "gitlab-ci/includes/python.gitlab-ci.yml"

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Run OCI jobs
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Run release jobs
  - project: 'ska-telescope/templates-repository'
    file : 'gitlab-ci/includes/release.gitlab-ci.yml'
#Build the artifact that caches docker image changes
versioning:
  stage: versioning
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  tags:
    - k8srunner

  script:
    - git fetch --unshallow
    - echo BASE_IMAGE = ${CI_REGISTRY_IMAGE}:$(git log -n 1 --pretty=format:%H -- Dockerfile) > versions.env
    - echo SINGULARITY_BUILDER_IMAGE = ${CI_REGISTRY_IMAGE}/singularity-builder:$(git log -n 1 --pretty=format:%H -- singularity/singularity_builder) >> versions.env

  artifacts:
    reports:
      dotenv: versions.env

#Stage for building docker for singularity image
docker-build-singularity-builder:
  stage: prepare
  needs: ["versioning"]
  image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE
  tags:
    - k8srunner
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - |
      if ! docker manifest inspect $SINGULARITY_BUILDER_IMAGE > /dev/null; then
        docker build --tag $SINGULARITY_BUILDER_IMAGE -f ./singularity/singularity_builder .
        docker push $SINGULARITY_BUILDER_IMAGE
      fi

# Build Singularity container
singularity-build:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^./'
  needs:
    - versioning
    - docker-build-singularity-builder

  image: $SINGULARITY_BUILDER_IMAGE

  script:
    - cd ./singularity
    - singularity build ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.sif Singularity

#publish the singularity image containing the pipeline binary dependencies to the CAR
singularity-build-publish-car:
  stage: publish
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - versioning
    - docker-build-singularity-builder

  image: $SINGULARITY_BUILDER_IMAGE

  script:
    - cd ./singularity
    - singularity build ${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.sif Singularity
    - curl -u ${CAR_RAW_USERNAME}:${CAR_RAW_PASSWORD} --upload-file ./${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.sif ${CAR_RAW_REPOSITORY_URL}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.sif
